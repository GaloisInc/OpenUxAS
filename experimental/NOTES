The initial reverse-engineering challenge is to separate out a UxAS task to
be compiled separately from the monolithic UxAS host; communicating over the
host's LMCP messaging interface.

My first, incomplete, work served to demonstrate the ease with which any
given compilation unit may be separated from the whole. This involves simply
removing the unit's source file from the main body of code, capturing all of
the necessary compiler flags, and compiling as a static library to be linked
to the host. This was done by hand, but the structure and consistency of the
Meson build specification suggests that it'd be relatively easy to automate
this process.

Alas, the rest is not as simple...

A first exploration involved attempts to visualize the UxAS code base, both
in terms of its source dependencies and its call graph, demonstrated that
na√Øve approaches are unable to provide usable visualizations due to the
size and complexity of the code base. (UxAS consists of approximately 800
source code files in various languages; mostly C++.)

C++ programs tend to conflate data and control through encapsulation; the
textual relationships exposed by include and call-graph analysis contain
many uninteresting nodes as a result. I did some follow-on work to manually
remove spurious details from the visualizations (i.e. by editing the
`dot` files created by the analysis tools), hoping to discover some simple
hueristics; I did not.

The `experimental/` directory contains tools used for these investigations.

As an aside, I've found that similar methods do provide useful visualizations
for moderately-sized C-language code bases.

Loosely speaking, the above approaches (visualization of a complete
source-code tree based upon either file inclusion or call graph) are
"top-down": we attempt to gain insight into the structure of the program
by interactively drilling down to regions of interest. Unfortunately,
the graphs generated for these visualizations are too complex to be useful.
It's certainly possible that a toolchain could be constructed to interact
with selected subsets of the graphs (as opposed to navigating the whole
dataset without filtering), but it's not clear as to how this might be
automated; my experiments involving manual pruning (by editing the generated
`dot` file) did not eventually produce a useful view of the program's
overall structure. To be clear: the `xdot` viewer has no problem navigating
a graph representing the whole UxAS program's calls; it is quite scalable
and responsive. It's just that there's way too much detail to be useful.

I envision some additional methods that might improve a top-down analysis.
Rather than speculatively (and manually) attempting to remove uninteresting
nodes, use a tool to extract subsets of the whole (e.g. by iteratively
"deepening" the graph from a chosen root). This might be a useful approach
for general discovery of a program's structure.

UxAS is a federation of tasks and services which interact via a structured
communication mechanism. To recap the initial goal of this investigation:
we'd like to be able to extract a task (and its necessary support) for
separate compilation while retaining the task's communication API. This
involves discovering a subset of source files that can be compiled to
create this external task and modifying the remaining UxAS base code to
load the separated task and establish its communication with UxAS. I see
this as a bottom-up approach, working from the exposed interface (in this
case: LMCP messages) to find and extract the portion of UxAS necessary to
instantiate this as a separate program.

---- From 20181029 meeting, per Matt:

When partitioning, watch for state dependencies; some services can't operate
without knowledge of state known to other subsystems.

---- 20181030

The `grapher1` tool is tailored to view a files dependency graph for OpenUxAS.
The tool requires the `xs` shell <https://github.com/TieDyedDevil/XS.git> and
`xdot` (available on Fedora as `python-xdot`; likely available under similar
names on other distros). As an alternative, `dotty` may be used to view the
file `experimental/out/grapher1.dot` created by the tool, although the UI of
`xdot` provides for much simpler and faster navigation.

The generated graph file may be rendered to PDF using `neato` and formatted
for printing as multiple pages using `pdfposter`.

---- 20181101

Based upon comments regarding "aggregation of dependent tasks", I've been
trying to determine what are the natural boundaries for decomposing UxAS.

One such boundary is the shared-library loader. A separately-compiled task
or service is linked at runtime to UxAS. At a minimum, UxAS should constrain
the shared-library version for compatibilty using semantic versioning. An
application-specific version check (e.g. to confirm an API version advertised
by the loadable module) may be added for more complex dependencies.

In the case of UxAS, the IPC mechanism used to pass messages among tasks is
another natural boundary. This case is slightly more complex: we must assure
interoperability of both the transport mechanism (e.g. the LMPCP code base)
and the messages exchanged by system components (e.g. as defined by the
message definition files compiled by LMCP).

Having performed a visual scan of the UxAS C++ code base, I see quite a few
static class members. These are effectively global data, some of which might
conceivably introduce coupling among subsystems. The vast majority of these
static members seem to be strings to hold names; for now I assume that these
static names are intended to name singletons. Based upon an informal
inspection, not assisted by program-analysis tools, I see no immediately
obvious evidence of coupling that might need to be preserved when extracting
tasks to be compiled outside of UxAS.

There does seem to be a set of tasks and services that are common to the
UxAS planner. These are identified in the sequence diagram found at
doc/reference/SequenceDiagrams/CCA_Components_MessageFlow.pdf :

	AutomationRequestValidator
	TaskManager
	RouteAggregator
	RoutePlannerVisibility
	AssignmentTreeBranchBound
	PlanBuilder
	WaypointManager
	AMASE

Looking at a sampling of task and service code, there are additional UxAS
compilation units used in the implementation of tasks and services, including
(listed here by functional category rather than name, as there are many):

	registry
	communications
	marshalling
	publish/subscribe
	geometry
	...

As I currently understand the UxAS code base, it can be seen as a runtime
environment into which tasks and services are statically linked to facilitate
convenient distribution of UxAS as a single executable file. (That's a slight
simplification: UxAS may interact with other programs at runtime to provide,
for example, simulation and visualization.) Assuming that I've not missed some
important structural aspect of UxAS, there are two important decisions to make
regarding the system's disaggration into a core plus external tasks and
services:

	1) Should externals be loadable, or should each run in a separate
	   process and integrate via an IPC mechanism?

	2) What parts of UxAS comprise its core functionality to be shared
	   by externals?

As noted earlier, the shared-library approach is quite simple while the
IPC approach will involve code duplication (for IPC, particularly w.r.t.
serialization) and mechanisms to enforce the use of mutually-compatible
components.

---- 20181106

Checkin w/ Matt and Erin

- Eventual goal is to be able to exchange modules between UxAS and DARPA CODE.
  - Both use publish/subscribe framework:
    - UxAS uses LMCP
    - DARPA CODE uses UCS (?)
- Tangram (Ben) is working to abstract messaging:
  - Message taxonomies
  - Automated translation LCMP->UCS and vice-versa
  - Might be ready later this month
- LMCPFactory is a dependency that can't be used for both LMCP and UCS
  - How should the LMCP API be factored/generalized to admit multiple
    publish/subscribe providers, assuming that message translation is
    handled by the provider?

---- 20181121

- Built `experimental/deplibs` tool to find the transitive closure of
  libraries upon which an object file depends. This tool uses `nm` and
  should work with both static and dynamic libraries. (So far, testing
  has only used static libraries since that is how OpenUxAS is built.)

- The deplibs tool must be applied to a successful debug build in order
  to have access to symbols.

- The deplibs tool identifies 20 libraries which are transitively
  required by the first task (AssignmentCoordinatorTaskService) targeted
  for disaggregration. Gathering the base task plus dependent libraries
  for separate compilation produces a 33MB executable. (The complete
  OpenUxAS application occupies 92MB on disk.)

- The trial build of the disaggregated AssigmentCoordinatorTaskService,
  noted in the previous section, captures a `main()` program from Zyre;
  the build options should be adjusted to ensure that Zyre is built as
  a library.

- Once the spurious Zyre main is suppressed, the disaggregated program
  will require a shim main() to instantiate the task and supporting
  libraries. This shim must be reverse-engineered from OpenUxAS main().

---- 20181121 follow-on

- The spurious main() is from Zyre's zpinger.c. Because Zyre is in the
  3rd-party directory, it is wrapped to be pulled and patched by Meson.
  The patch needs to be updated: Don't build zpinger.c.

- Upon eliminating zpinger.c, the disaggregated task (correctly) fails
  to build without a main().

- Specifying UxAS_Main.cpp as the main program for the disaggregated
  task results in a program that's the same size as the full UxAS build.

- Now that AssignmentCoordinatorTaskService is not linked by UxAS, the
  UxAS build (correctly) fails.

- Each disaggregated task will need a shim in UxAS in order to (a) link
  UxAS and (b) interact with the disaggregated task.

- Investigate two approaches to a task/service shim: (1) create RPC
  specific to the disaggregated function [easiest, but introduces a new
  protocol], and (2) process UxAS messages relayed from UxAS host app
  [duplicates code and support services; may not be possible without
  additional protocols to update shared state in UxAS].
