/* automatically generated by rust-bindgen */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ObjectiveParameters {
    pub sameSide: ::std::os::raw::c_uint,
    pub nominalAzimuthInRadians: f64,
    pub nominalElevationInRadians: f64,
    pub lreLatitudeInRadians: f64,
    pub lreLongitudeInRadians: f64,
    pub nearWaypointThresholdDistanceInMeters: f64,
    pub reverseManeuverDistanceInMeters: f64,
    pub rendezvousDistanceInMeters: f64,
}
#[test]
fn bindgen_test_layout_ObjectiveParameters() {
    assert_eq!(
        ::std::mem::size_of::<ObjectiveParameters>(),
        64usize,
        concat!("Size of: ", stringify!(ObjectiveParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<ObjectiveParameters>(),
        8usize,
        concat!("Alignment of ", stringify!(ObjectiveParameters))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ObjectiveParameters>())).sameSide as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(sameSide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).nominalAzimuthInRadians as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(nominalAzimuthInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).nominalElevationInRadians as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(nominalElevationInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).lreLatitudeInRadians as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(lreLatitudeInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).lreLongitudeInRadians as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(lreLongitudeInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).nearWaypointThresholdDistanceInMeters
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(nearWaypointThresholdDistanceInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).reverseManeuverDistanceInMeters
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(reverseManeuverDistanceInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ObjectiveParameters>())).rendezvousDistanceInMeters as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ObjectiveParameters),
            "::",
            stringify!(rendezvousDistanceInMeters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmoothPathInput {
    pub sameSide: ::std::os::raw::c_uint,
    pub roughPlan: ::std::os::raw::c_uint,
    pub maxWaypoints: ::std::os::raw::c_uint,
    pub useTerrainFollowing: ::std::os::raw::c_uint,
    pub cameraAzimuthInRadians: f64,
    pub cameraElevationInRadians: f64,
    pub nominalAltitudeInMeters: f64,
    pub maxCommRangeInMeters: f64,
    pub lostCommPointLatitudeInRadians: f64,
    pub lostCommPointLongitudeInRadians: f64,
}
#[test]
fn bindgen_test_layout_SmoothPathInput() {
    assert_eq!(
        ::std::mem::size_of::<SmoothPathInput>(),
        64usize,
        concat!("Size of: ", stringify!(SmoothPathInput))
    );
    assert_eq!(
        ::std::mem::align_of::<SmoothPathInput>(),
        8usize,
        concat!("Alignment of ", stringify!(SmoothPathInput))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmoothPathInput>())).sameSide as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(sameSide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmoothPathInput>())).roughPlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(roughPlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SmoothPathInput>())).maxWaypoints as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(maxWaypoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).useTerrainFollowing as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(useTerrainFollowing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).cameraAzimuthInRadians as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(cameraAzimuthInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).cameraElevationInRadians as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(cameraElevationInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).nominalAltitudeInMeters as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(nominalAltitudeInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).maxCommRangeInMeters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(maxCommRangeInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).lostCommPointLatitudeInRadians as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(lostCommPointLatitudeInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SmoothPathInput>())).lostCommPointLongitudeInRadians as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SmoothPathInput),
            "::",
            stringify!(lostCommPointLongitudeInRadians)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DpssWaypoint {
    pub waypointNumber: ::std::os::raw::c_ushort,
    pub latitudeInRadians: f64,
    pub longitudeInRadians: f64,
    pub altitudeInMeters: f64,
}
#[test]
fn bindgen_test_layout_DpssWaypoint() {
    assert_eq!(
        ::std::mem::size_of::<DpssWaypoint>(),
        32usize,
        concat!("Size of: ", stringify!(DpssWaypoint))
    );
    assert_eq!(
        ::std::mem::align_of::<DpssWaypoint>(),
        8usize,
        concat!("Alignment of ", stringify!(DpssWaypoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DpssWaypoint>())).waypointNumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DpssWaypoint),
            "::",
            stringify!(waypointNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DpssWaypoint>())).latitudeInRadians as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DpssWaypoint),
            "::",
            stringify!(latitudeInRadians)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DpssWaypoint>())).longitudeInRadians as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DpssWaypoint),
            "::",
            stringify!(longitudeInRadians)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DpssWaypoint>())).altitudeInMeters as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DpssWaypoint),
            "::",
            stringify!(altitudeInMeters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VehicleGoToPoint {
    pub waypointNumber: ::std::os::raw::c_ushort,
    pub vehicleId: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VehicleGoToPoint() {
    assert_eq!(
        ::std::mem::size_of::<VehicleGoToPoint>(),
        8usize,
        concat!("Size of: ", stringify!(VehicleGoToPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<VehicleGoToPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(VehicleGoToPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehicleGoToPoint>())).waypointNumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleGoToPoint),
            "::",
            stringify!(waypointNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehicleGoToPoint>())).vehicleId as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleGoToPoint),
            "::",
            stringify!(vehicleId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VehicleTelemetry {
    pub vehicleId: ::std::os::raw::c_int,
    pub toWaypointNumber: ::std::os::raw::c_ushort,
    pub fromWaypointNumber: ::std::os::raw::c_ushort,
    pub latitudeInRadians: f64,
    pub longitudeInRadians: f64,
    pub altitudeInMeters: f64,
    pub headingInRadians: f64,
    pub airSpeedInMps: f64,
    pub uWindNorthInMps: f64,
    pub vWindEastInMps: f64,
    pub commandedAltitudeInMeters: f64,
    pub commandedAirspeedInMps: f64,
    pub energyRemaining: f64,
}
#[test]
fn bindgen_test_layout_VehicleTelemetry() {
    assert_eq!(
        ::std::mem::size_of::<VehicleTelemetry>(),
        88usize,
        concat!("Size of: ", stringify!(VehicleTelemetry))
    );
    assert_eq!(
        ::std::mem::align_of::<VehicleTelemetry>(),
        8usize,
        concat!("Alignment of ", stringify!(VehicleTelemetry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehicleTelemetry>())).vehicleId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(vehicleId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).toWaypointNumber as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(toWaypointNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).fromWaypointNumber as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(fromWaypointNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).latitudeInRadians as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(latitudeInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).longitudeInRadians as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(longitudeInRadians)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).altitudeInMeters as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(altitudeInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).headingInRadians as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(headingInRadians)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehicleTelemetry>())).airSpeedInMps as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(airSpeedInMps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).uWindNorthInMps as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(uWindNorthInMps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehicleTelemetry>())).vWindEastInMps as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(vWindEastInMps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).commandedAltitudeInMeters as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(commandedAltitudeInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).commandedAirspeedInMps as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(commandedAirspeedInMps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VehicleTelemetry>())).energyRemaining as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VehicleTelemetry),
            "::",
            stringify!(energyRemaining)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VehiclePoint {
    pub vehicleId: ::std::os::raw::c_int,
    pub latitudeInRadians: f64,
    pub longitudeInRadians: f64,
    pub altitudeInMeters: f64,
}
#[test]
fn bindgen_test_layout_VehiclePoint() {
    assert_eq!(
        ::std::mem::size_of::<VehiclePoint>(),
        32usize,
        concat!("Size of: ", stringify!(VehiclePoint))
    );
    assert_eq!(
        ::std::mem::align_of::<VehiclePoint>(),
        8usize,
        concat!("Alignment of ", stringify!(VehiclePoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehiclePoint>())).vehicleId as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VehiclePoint),
            "::",
            stringify!(vehicleId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehiclePoint>())).latitudeInRadians as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VehiclePoint),
            "::",
            stringify!(latitudeInRadians)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehiclePoint>())).longitudeInRadians as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VehiclePoint),
            "::",
            stringify!(longitudeInRadians)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VehiclePoint>())).altitudeInMeters as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VehiclePoint),
            "::",
            stringify!(altitudeInMeters)
        )
    );
}
#[repr(C)]
pub struct Dpss {
    pub _bindgen_opaque_blob: [u64; 89usize],
}
pub const Dpss_OptimizeType_Path: Dpss_OptimizeType = 0;
pub const Dpss_OptimizeType_SensorPointingForward: Dpss_OptimizeType = 1;
pub const Dpss_OptimizeType_SensorPointingReverse: Dpss_OptimizeType = 2;
pub type Dpss_OptimizeType = u32;
#[test]
fn bindgen_test_layout_Dpss() {
    assert_eq!(
        ::std::mem::size_of::<Dpss>(),
        712usize,
        concat!("Size of: ", stringify!(Dpss))
    );
    assert_eq!(
        ::std::mem::align_of::<Dpss>(),
        8usize,
        concat!("Alignment of ", stringify!(Dpss))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN4DpssC1Ev"]
    pub fn Dpss_Dpss(this: *mut Dpss);
}
extern "C" {
    #[link_name = "\u{1}_ZN4DpssD1Ev"]
    pub fn Dpss_Dpss_destructor(this: *mut Dpss);
}
impl Dpss {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        Dpss_Dpss(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Dpss_Dpss_destructor(self)
    }
}
extern "C" {
    pub fn CreateDpss() -> *mut Dpss;
}
extern "C" {
    pub fn DestroyDpss(instance: *mut Dpss);
}
extern "C" {
    pub fn SmoothPath(
        instance: *mut Dpss,
        pathPoints: *mut DpssWaypoint,
        numPoints: ::std::os::raw::c_int,
        spi: *mut SmoothPathInput,
        outputPoints: *mut DpssWaypoint,
        numOutputPoints: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SetObjective(
        instance: *mut Dpss,
        pathPoints: *mut DpssWaypoint,
        numPathPoints: ::std::os::raw::c_int,
        planPoints: *mut DpssWaypoint,
        numPlanPoints: ::std::os::raw::c_int,
        op: *mut ObjectiveParameters,
    );
}
extern "C" {
    pub fn AddVehicles(
        instance: *mut Dpss,
        vehicleIds: *mut ::std::os::raw::c_int,
        numVehicles: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RemoveVehicles(
        instance: *mut Dpss,
        vehicleIds: *mut ::std::os::raw::c_int,
        numVehicles: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn UpdateVehicleTelemetry(instance: *mut Dpss, telemetry: VehicleTelemetry);
}
extern "C" {
    pub fn SetOutputPath(instance: *mut Dpss, path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn SetLostCommWaypointNumber(
        instance: *mut Dpss,
        lostCommWaypointNumber: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn UpdateDpss(
        instance: *mut Dpss,
        sensorPoints: *mut VehiclePoint,
        numSensorPoints: *mut ::std::os::raw::c_int,
        vehicleGotoPoints: *mut VehicleGoToPoint,
        numGotoPoints: *mut ::std::os::raw::c_int,
        turnPoints: *mut VehiclePoint,
        numTurnPoints: *mut ::std::os::raw::c_int,
    );
}
